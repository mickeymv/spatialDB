PERFORMANCE MEASURES:
> these will be used to compare the performance of different algorithms to see which perform best in different testing scenarios
> graphs will be generated to visualize the results
performance for 10^n points dispersed randomly inside a shape
performance for 10^n points that are close to shape edge
performance for 10^n points that are on shape edge
n is from 1 to 7

TEST CASES FOR DETECTING BUGS:
> these are the test cases which will be used to ensure there are no bugs in the implementations
-small number of points:
1-3 points
-duplicated points:
only duplicated points
2 points duplicated
-colinear points
-2 points colinear inside hull
-2 points colinear along the hull
-all points colinear
-random points
-10^4
-10^6
-points already in a hull
-10^4 points in circle


DOCUMENTATION FOR MAKE TEST:
> this executable will be used for all the testing
-make test creates test executable for the specified algorithm
-prints to console the time taken
-stores generated points as test_in
-stores resulting hull as test_out

test  [algorithm] [int n] [double r] <-s> <-o> <-silent>
algorithm=(jarvis graham quick divideconquer newalgo)
n=number of points
 r=range point
  s=(optional: designates shape points go inside: s=square, c=circle)
 o=(optional: designates points as: e=exactly on shape edge, c=close to shape edge)

i.e.   test jarvis 100 1000 -c -e # this makes 100 random points range -1000,1000 in an exact circle and runs jarvis on the points
test divideandconquer 10 5 -s -c  # this makes 10 random points range -5 5 where all points are closely follow a square and runs divideandconquer
